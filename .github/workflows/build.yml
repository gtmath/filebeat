#
name: Build Filebeat

# This workflow runs when any of the following occur:
# - A push is made to a branch called `main` or `seed`
# - A tag starting with "v" is created
# - A pull request is created or updated
on:
  push:
    branches:
      - 7.17
    tags:
      - v*
  pull_request:
  # This creates an environment variable called `IMAGE_NAME ` with the value `ghtoken_product_demo`.
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/filebeat
#
jobs:
  # This pushes the image to GitHub Packages.
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      security-events: write
      #
    steps:
      - uses: actions/checkout@v4

      - name: Set Variables
        run: |
          VER=$(cat filebeat.target.version)
          echo "FILEBEAT_VERSION=$VER" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=$IMAGE_NAME:$VER" >> $GITHUB_ENV

      - name: Build Image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME:$FILEBEAT_VERSION --label "runnumber=${GITHUB_RUN_ID}"

      - name: Build Info
        run: |
          docker image ls
          echo $IMAGE_NAME:$FILEBEAT_VERSION
          echo $FULL_IMAGE_NAME

      - name: Scan Image via Anchore Grype
        uses: anchore/scan-action@v6
        id: scan
        with:
          image: ${{ env.FULL_IMAGE_NAME }}
          fail-build: true
          severity-cutoff: high
          output-format: table
          grype-version: v0.92.0

      - name: Inspect SARIF Report
        if: always()
        run: cat ${{ steps.scan.outputs.sarif }}

      - name: Upload Vulnerability Report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        #
      - name: Push Image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          # docker tag $IMAGE_NAME $IMAGE_ID:$FILEBEAT_VERSION
          docker push $IMAGE_NAME:$FILEBEAT_VERSION
